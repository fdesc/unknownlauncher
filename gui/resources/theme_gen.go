// Code generated by fyne-theme-generator

package resources

import (
	"image/color"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/theme"
)

type DefaultDarkTheme struct{}
type DefaultLightTheme struct{}

func (DefaultDarkTheme) Color(c fyne.ThemeColorName, v fyne.ThemeVariant) color.Color {
	switch c {
	case theme.ColorNameBackground:
		return color.RGBA{R: 18, G: 18, B: 18, A: 255}
	case theme.ColorNameOverlayBackground:
		return color.RGBA{R :22, G: 22, B: 22, A:255}
	case theme.ColorNameMenuBackground:
		return color.RGBA{R: 22, G: 22, B: 22, A: 255}
	case theme.ColorNameButton:
		return color.RGBA{R: 32, G: 32, B: 32, A: 255}
	case theme.ColorNameDisabledButton:
		return color.RGBA{R: 43, G: 43, B: 43, A: 140}
	case theme.ColorNameDisabled:
		return color.RGBA{R: 83, G: 83, B: 83, A: 140}
	case theme.ColorNameError:
		return color.RGBA{R: 244, G: 67, B: 54, A: 255}
	case theme.ColorNameFocus:
		return color.RGBA{R: 30, G: 150, B: 160, A: 230}
	case theme.ColorNameForeground:
		return color.RGBA{R: 224, G: 226, B: 224, A: 255}
	case theme.ColorNameHover:
		return color.RGBA{R: 10, G: 10, B: 10, A: 1}
	case theme.ColorNameInputBackground:
		return color.RGBA{R: 54, G: 54, B: 54, A: 100}
	case theme.ColorNamePlaceHolder:
		return color.RGBA{R: 244, G: 244, B: 244, A: 255}
	case theme.ColorNamePressed:
		return color.RGBA{R: 18, G: 18, B: 9, A: 15}
	case theme.ColorNamePrimary:
		return color.RGBA{R: 68, G: 148, B: 242, A: 255}
	case theme.ColorNameScrollBar:
		return color.RGBA{R: 255, G: 255, B: 255, A: 243}
	case theme.ColorNameShadow:
		return color.NRGBA{R: 0, G: 0, B: 0, A: 66}
	default:
		return theme.DefaultTheme().Color(c, v)
	}
}

func (DefaultDarkTheme) Font(s fyne.TextStyle) fyne.Resource {
	if s.Monospace {
		return theme.DefaultTheme().Font(s)
	}
	if s.Bold {
		if s.Italic {
			return theme.DefaultTheme().Font(s)
		}
		return fontDMSansBoldTtf
	}
	if s.Italic {
		return theme.DefaultTheme().Font(s)
	}
	return fontDMSansRegularTtf
}

func (DefaultDarkTheme) Icon(n fyne.ThemeIconName) fyne.Resource {
	return theme.DefaultTheme().Icon(n)
}

func (DefaultDarkTheme) Size(s fyne.ThemeSizeName) float32 {
	switch s {
	case theme.SizeNameCaptionText:
		return 15
	case theme.SizeNameInlineIcon:
		return 18
	case theme.SizeNamePadding:
		return 4
	case theme.SizeNameScrollBar:
		return 12
	case theme.SizeNameScrollBarSmall:
		return 2
	case theme.SizeNameSeparatorThickness:
		return 1
	case theme.SizeNameText:
		return 15
	case theme.SizeNameInputBorder:
		return 1.5
	default:
		return theme.DefaultTheme().Size(s)
	}
}

func (DefaultLightTheme) Color(c fyne.ThemeColorName, v fyne.ThemeVariant) color.Color {
        switch c {
        case theme.ColorNameBackground:
                return color.RGBA{R: 235, G: 235, B: 235, A: 255}
	case theme.ColorNameOverlayBackground:
		return color.RGBA{R :220, G: 220, B: 220, A: 255}
	case theme.ColorNameMenuBackground:
		return color.RGBA{R :220, G: 220, B: 220, A: 255}
        case theme.ColorNameButton:
                return color.RGBA{R: 191, G: 191, B: 191, A: 255}
        case theme.ColorNameDisabledButton:
                return color.RGBA{R: 160, G: 160, B: 160, A: 255}
        case theme.ColorNameDisabled:
                return color.RGBA{R: 0, G: 0, B: 0, A: 65}
        case theme.ColorNameError:
                return color.RGBA{R: 244, G: 67, B: 54, A: 255}
        case theme.ColorNameFocus:
                return color.RGBA{R: 30, G: 150, B: 160, A: 230}
        case theme.ColorNameForeground:
                return color.RGBA{R: 18, G: 18, B: 18, A: 255}
        case theme.ColorNameHover:
                return color.RGBA{R: 0, G: 0, B: 0, A: 47}
        case theme.ColorNameInputBackground:
                return color.RGBA{R: 0, G: 0, B: 0, A: 32}
        case theme.ColorNamePlaceHolder:
                return color.RGBA{R: 0, G: 0, B: 0, A: 143}
        case theme.ColorNamePressed:
                return color.RGBA{R: 0, G: 0, B: 9, A: 15}
        case theme.ColorNamePrimary:
                return color.RGBA{R: 68, G: 148, B: 242, A: 255}
        case theme.ColorNameScrollBar:
                return color.RGBA{R: 0, G: 0, B: 0, A: 100}
        case theme.ColorNameShadow:
                return color.RGBA{R: 0, G: 0, B: 0, A: 32}
        default:
                return theme.DefaultTheme().Color(c, v)
        }
}

func (DefaultLightTheme) Font(s fyne.TextStyle) fyne.Resource {
	if s.Monospace {
		return theme.DefaultTheme().Font(s)
	}
	if s.Bold {
		if s.Italic {
			return theme.DefaultTheme().Font(s)
		}
		return fontDMSansBoldTtf
	}
	if s.Italic {
		return theme.DefaultTheme().Font(s)
	}
	return fontDMSansRegularTtf
}

func (DefaultLightTheme) Icon(n fyne.ThemeIconName) fyne.Resource {
        return theme.DefaultTheme().Icon(n)
}

func (DefaultLightTheme) Size(s fyne.ThemeSizeName) float32 {
	switch s {
	case theme.SizeNameCaptionText:
		return 15
	case theme.SizeNameInlineIcon:
		return 18
	case theme.SizeNamePadding:
		return 4
	case theme.SizeNameScrollBar:
		return 12
	case theme.SizeNameScrollBarSmall:
		return 2
	case theme.SizeNameSeparatorThickness:
		return 1
	case theme.SizeNameText:
		return 15
	case theme.SizeNameInputBorder:
		return 1.5
	default:
		return theme.DefaultTheme().Size(s)
	}
}
